Update the KidSign app to expand the physical security integration for daycare door access control, building on the existing serial port and network-based locks. Make the security module modular and comprehensive to support additional common door opener types used in schools/daycares: Keypad/PIN-based, RFID/Key Card/Fob, Biometric (fingerprint/facial), Mobile/Bluetooth/NFC, Intercom/Video Doorbell, and Electromagnetic Locks/Electric Strikes. This addresses research on enhancing child safety, compliance (e.g., WV monitored access), and user convenience, while avoiding pain points like manual keys or unauthorized entry. Tie unlocks to verified attendance events (e.g., sign-in/out with timestamps/photos), with logging for audits and role-based permissions (admins/staff control).

Ensure the system is optional, beginner-friendly (e.g., simple toggles in UI), and reliable (fail-safes, error handling to prevent glitches like Procare disconnects). Use existing Flask/Python structure with SQLite for storing configs/logs. Import necessary libraries as needed (e.g., pyserial for hardware, requests for APIs, bleak for Bluetooth). Simulate where hardware isn't present (e.g., print commands for testing). Encrypt sensitive data (e.g., API keys, biometrics templates) for HIPAA-like security.

Key enhancements by type (add to 'Security' tab in dashboard with dropdowns for type selection, door mappings, timeouts (5-10 sec unlocks), and test buttons):
- **Keypad/PIN-Based**: Support via serial (pyserial commands to validate/enter PINs) or network APIs (requests to vendor endpoints like Kwikset). On sign-in, generate/send temporary PINs to parents via email/SMS. UI: Field for PIN length/custom codes; logic: Verify PIN before unlock, log attempts.
- **RFID/Key Card/Fob**: Integrate with Wiegand protocol readers via serial/GPIO (pyserial) or APIs (requests for cloud systems like HID). Link to user profiles—scan verifies and unlocks. UI: Option to assign/revoke cards; logic: Proximity trigger on attendance, with access revocation for ex-parents.
- **Biometric (Fingerprint/Facial)**: Use vendor SDKs/APIs (e.g., requests to ZKTeco endpoints) or local sensors via serial/USB. Store encrypted templates in DB. UI: Enrollment wizard for scans; logic: Match on sign-in for auto-unlock, with two-factor option (e.g., + PIN) for high security.
- **Mobile/Bluetooth/NFC**: Enable via Bluetooth libraries (import bleak) for local pairing or NFC readers (pyserial). Use app-generated credentials (e.g., QR codes). UI: Toggle for device pairing; logic: Smartphone tap/nearby detection unlocks on verified events, with temporary visitor passes.
- **Intercom/Video Doorbell**: Integrate APIs (requests to Ring/ButterflyMX) for video feeds and remote unlock. UI: Embed live view in dashboard, with 'Approve Unlock' button; logic: On door buzz, notify admin via app/email, verify visually, then unlock—tie to attendance for auto-approval if parent is signed in.
- **Electromagnetic Locks (Maglocks)/Electric Strikes**: Control via relays (serial/GPIO with pyserial) or network. UI: Settings for fail-safe modes (e.g., unlock on power loss); logic: De-energize on commands, with timeouts and integration to ratios (e.g., lock if over capacity).

Overall Logic: Trigger unlocks on attendance flows; add global settings for multi-door setups (e.g., zone-specific). Alerts: Email admins on failures/unauthorized attempts. Scalability: Modular classes for each type to easily add/remove.

Generate updated code (e.g., new routes, DB tables for configs, import libs), explain changes/how they address research, and provide a simulation test script. Focus on modularity for future expansions.