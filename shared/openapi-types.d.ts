/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate user
         * @description Login with email/password to receive JWT token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example teacher@tothub.com
                         */
                        email: string;
                        /** @example securePassword123 */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Authentication successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description JWT access token */
                            token?: string;
                            /** @description JWT refresh token */
                            refreshToken?: string;
                            user?: components["schemas"]["User"];
                        };
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many login attempts */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description Token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description New JWT access token */
                            token?: string;
                        };
                    };
                };
                /** @description Invalid refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List children
         * @description Retrieve paginated list of children with optional filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (1-based) */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by room ID */
                    room?: string;
                    /** @description Filter by enrollment status */
                    status?: "enrolled" | "unenrolled" | "aged_out";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of children */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["Child"][];
                            pagination?: components["schemas"]["Pagination"];
                        };
                    };
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create new child
         * @description Add a new child to the system
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChildCreate"];
                };
            };
            responses: {
                /** @description Child created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get child details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Child details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"];
                    };
                };
                /** @description Child not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update child */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChildUpdate"];
                };
            };
            responses: {
                /** @description Child updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"];
                    };
                };
                /** @description Child not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attendance/checkin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check in child
         * @description Record child check-in with optional photo and notes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Child's unique identifier */
                        childId: string;
                        /** @description Room where child is being checked in */
                        roomId: string;
                        /** @description Staff member performing check-in */
                        checkedInBy: string;
                        /**
                         * Format: uri
                         * @description Optional photo URL
                         */
                        photo?: string;
                        /** @description Child's mood rating (1-5) */
                        moodRating?: number;
                        /** @description Additional notes or special instructions */
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Check-in successful */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendanceRecord"];
                    };
                };
                /** @description Validation error or ratio violation */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attendance/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check out child
         * @description Record child check-out
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Child's unique identifier */
                        childId: string;
                        /** @description Person picking up child */
                        checkedOutBy: string;
                        /** @description Any notes about the day */
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Check-out successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AttendanceRecord"];
                    };
                };
                /** @description Child not found or not checked in */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/compliance/ratios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current room ratios
         * @description Retrieve real-time staff-to-child ratios for all rooms
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current room ratios */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RoomRatio"][];
                    };
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/compliance/rulesets/{state}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get state compliance rules
         * @description Retrieve compliance rules for a specific state
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    state: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description State compliance rules */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ComplianceRuleset"];
                    };
                };
                /** @description State rules not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/compliance/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check room compliance
         * @description Comprehensive room compliance check including ratios, qualifications, and facility requirements
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example WV */
                        state: string;
                        room: components["schemas"]["Room"];
                        children: components["schemas"]["Child"][];
                        staff: components["schemas"]["Staff"][];
                    };
                };
            };
            responses: {
                /** @description Room compliance check result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uuid */
                            roomId?: string;
                            state?: string;
                            compliant?: boolean;
                            violations?: components["schemas"]["ComplianceViolation"][];
                            warnings?: components["schemas"]["ComplianceWarning"][];
                            complianceScore?: number;
                            recommendations?: string[];
                            /** Format: date-time */
                            timestamp?: string;
                        };
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/staff/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get staff schedules
         * @description Retrieve staff schedules with optional date filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date for schedule range (YYYY-MM-DD) */
                    startDate?: string;
                    /** @description End date for schedule range (YYYY-MM-DD) */
                    endDate?: string;
                    /** @description Filter by specific staff member */
                    staffId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Staff schedules */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StaffSchedule"][];
                    };
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payroll/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export payroll data
         * @description Generate payroll export for QuickBooks or other systems
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: date
                         * @description Start of pay period
                         */
                        payPeriodStart: string;
                        /**
                         * Format: date
                         * @description End of pay period
                         */
                        payPeriodEnd: string;
                        /**
                         * @description Export format
                         * @enum {string}
                         */
                        format: "csv" | "iif" | "json";
                        /**
                         * @description Include tax calculations
                         * @default true
                         */
                        includeTaxes?: boolean;
                    };
                };
            };
            responses: {
                /** @description Payroll export generated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uri
                             * @description URL to download the export file
                             */
                            downloadUrl?: string;
                            /**
                             * Format: date-time
                             * @description When the download URL expires
                             */
                            expiresAt?: string;
                        };
                    };
                };
                /** @description Invalid date range or format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard analytics
         * @description Retrieve key metrics and analytics for the dashboard
         */
        get: {
            parameters: {
                query?: {
                    /** @description Date range for analytics */
                    dateRange?: "today" | "week" | "month" | "quarter" | "year";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dashboard analytics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DashboardAnalytics"];
                    };
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /** Format: uuid */
            id?: string;
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "admin" | "manager" | "staff" | "parent";
            /** Format: uuid */
            tenantId?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            lastLoginAt?: string;
        };
        Child: {
            /** Format: uuid */
            id?: string;
            firstName?: string;
            lastName?: string;
            /** Format: date */
            dateOfBirth?: string;
            /** Format: email */
            parentEmail?: string;
            parentPhone?: string;
            emergencyContact?: string;
            medicalNotes?: string;
            /** Format: date */
            enrollmentDate?: string;
            isActive?: boolean;
            /** Format: uuid */
            roomId?: string;
            /** Format: uuid */
            tenantId?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        ChildCreate: {
            firstName: string;
            lastName: string;
            /** Format: date */
            dateOfBirth: string;
            /** Format: email */
            parentEmail: string;
            parentPhone?: string;
            emergencyContact?: string;
            medicalNotes?: string;
            /** Format: uuid */
            roomId?: string;
        };
        ChildUpdate: {
            firstName?: string;
            lastName?: string;
            /** Format: email */
            parentEmail?: string;
            parentPhone?: string;
            emergencyContact?: string;
            medicalNotes?: string;
            /** Format: uuid */
            roomId?: string;
            isActive?: boolean;
        };
        AttendanceRecord: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            childId?: string;
            /** Format: uuid */
            roomId?: string;
            /** Format: date-time */
            checkInTime?: string;
            /** Format: date-time */
            checkOutTime?: string;
            /** Format: uuid */
            checkedInBy?: string;
            /** Format: uuid */
            checkedOutBy?: string;
            moodRating?: number;
            notes?: string;
            /** Format: uri */
            photoUrl?: string;
            /** Format: uuid */
            tenantId?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        RoomRatio: {
            /** Format: uuid */
            roomId?: string;
            roomName?: string;
            currentStaff?: number;
        };
        ComplianceViolation: {
            /** @enum {string} */
            type?: "ratio" | "qualification" | "facility" | "safety";
            /** @enum {string} */
            severity?: "low" | "medium" | "high" | "critical";
            message?: string;
            /** Format: uuid */
            roomId?: string;
            /** Format: uuid */
            staffId?: string;
            details?: Record<string, never>;
        };
        ComplianceWarning: {
            /** @enum {string} */
            type?: "ratio_warning" | "qualification_warning" | "facility_warning";
            message?: string;
            /** Format: uuid */
            roomId?: string;
            /** Format: uuid */
            staffId?: string;
            details?: Record<string, never>;
        };
        Room: {
            /** Format: uuid */
            id?: string;
            name?: string;
            /** Format: uuid */
            tenantId?: string;
            capacity?: number;
            /** @enum {string} */
            ageGroup?: "Infant" | "Toddler" | "Preschool" | "School Age";
            isActive?: boolean;
        };
        Staff: {
            /** Format: uuid */
            id?: string;
            firstName?: string;
            lastName?: string;
            position?: string;
            qualifications?: string[];
            certifications?: string[];
            experienceYears?: number;
            /** Format: uuid */
            roomId?: string;
            /** Format: uuid */
            tenantId?: string;
            isActive?: boolean;
            currentChildren?: number;
            /** @example 1:10 */
            maxRatio?: string;
            isCompliant?: boolean;
            /** Format: date-time */
            lastUpdated?: string;
        };
        ComplianceRuleset: {
            state?: string;
            version?: string;
            /** Format: date */
            effectiveDate?: string;
            rules?: {
                ageGroups?: components["schemas"]["AgeGroupRule"][];
                staffQualifications?: components["schemas"]["StaffQualification"][];
                ratios?: components["schemas"]["RatioRule"][];
            };
        };
        AgeGroupRule: {
            /** @example Infant */
            name?: string;
            /** @example 0 */
            minAge?: number;
            /** @example 12 */
            maxAge?: number;
            /**
             * @example months
             * @enum {string}
             */
            unit?: "months" | "years";
        };
        StaffQualification: {
            /** @example Lead Teacher */
            position?: string;
            /** @example Bachelor's Degree in Early Childhood Education */
            requiredEducation?: string;
            /** @example 2 years in licensed childcare */
            requiredExperience?: string;
            /** @example [
             *       "CPR",
             *       "First Aid"
             *     ] */
            requiredCertifications?: string[];
        };
        RatioRule: {
            /** @example Infant */
            ageGroup?: string;
            /** @example 1:4 */
            maxRatio?: string;
            /** @example 8 */
            maxGroupSize?: number;
            /** @example Maximum 2 infants per caregiver */
            notes?: string;
        };
        StaffSchedule: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            staffId?: string;
            /** Format: uuid */
            roomId?: string;
            /** Format: date */
            date?: string;
            /** Format: date-time */
            scheduledStart?: string;
            /** Format: date-time */
            scheduledEnd?: string;
            /** Format: date-time */
            actualStart?: string;
            /** Format: date-time */
            actualEnd?: string;
            /** @enum {string} */
            scheduleType?: "regular" | "overtime" | "training" | "float";
            /** @enum {string} */
            status?: "scheduled" | "in_progress" | "completed" | "cancelled";
            notes?: string;
        };
        DashboardAnalytics: {
            totalChildren?: number;
            totalStaff?: number;
            /** Format: float */
            attendanceRate?: number;
            /** Format: float */
            complianceScore?: number;
            /** Format: float */
            revenue?: number;
            /** Format: float */
            expenses?: number;
            alerts?: components["schemas"]["Alert"][];
        };
        Alert: {
            /** Format: uuid */
            id?: string;
            /** @enum {string} */
            type?: "ratio_violation" | "staff_shortage" | "compliance_warning" | "system_alert";
            /** @enum {string} */
            severity?: "low" | "medium" | "high" | "critical";
            message?: string;
            /** Format: uuid */
            roomId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            resolvedAt?: string;
            /** Format: uuid */
            resolvedBy?: string;
        };
        Pagination: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
            hasNext?: boolean;
            hasPrev?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
